@using retecs.ReteCs.Engine
@using retecs.ReteCs.Entities
@using Component = retecs.ReteCs.Component
@using retecs.Components
@using retecs.RenderPlugin
@using System.Text.Json
@using retecs.BlazorServices
<!--TODO @onresize="@()"-->
<!--TODO Contextmenu -->
<div class="wrapper">
    <div class="node-editor"
         style="overflow: hidden;touch-action: none; height:100%; min-height: 100%; display: block; position: absolute;
          width: 100%; min-width: 100%">
        <ReteArea RenderFragment="@_renderFragment"></ReteArea>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        static string Serialize(object data)
        {
            if (data != null)
            {
                return "; Data: " + JsonSerializer.Serialize(data);
            }
            return "";
        }

        Editor = new NodeEditor("rete@0.0.1", Emitter);
        Editor.Emitter.WindowKeyDown += _ => Console.WriteLine("WindowKeyDown");
        Editor.Emitter.WindowKeyUp += _ => Console.WriteLine("WindowKeyUp");
        Editor.Emitter.WindowMouseMove += _ => Console.WriteLine("WindowMouseMove");
        Editor.Emitter.WindowMouseUp += _ => Console.WriteLine("WindowMouseUp");
        Editor.Emitter.Warn += (warning, data) =>  Console.WriteLine("Warning: " + warning + Serialize(data));
        Editor.Emitter.Error += (error, data) => Console.WriteLine("Error: " + error + Serialize(data));
        Editor.Emitter.Info += (info, data) =>  Console.WriteLine("Info: " + info + Serialize(data));
        Editor.Emitter.Debug += (info, data) =>  Console.WriteLine("Debug: " + info + Serialize(data));

        Editor.Use(new BasicRenderer());
        // editor.use(ContextMenuPlugin);

        Engine = new Engine("rete@0.0.1", Emitter);
        var components = new List<Component> { new NumComponent(Emitter), new NumOutComponent(Emitter) };
        components.ForEach(component =>
        {
            Editor.Register(component);
            Engine.Register(component);
        });

        var n1 = components[0].CreateNode(new Dictionary<string, object>
        {
            {"num", 2}
        });
        var n2 = components[1].CreateNode(new Dictionary<string, object>());
        var n3 = components[1].CreateNode(new Dictionary<string, object>());
        n1.Position = new Point(80, 200);
        n2.Position = new Point(400, 200);
        n3.Position = new Point(400, 400);
        Editor.Emitter.Process += RequestAnimationFrame;
        Editor.Emitter.ConnectionCreated += _ => RequestAnimationFrame();
        Editor.Emitter.ConnectionRemoved += _ => RequestAnimationFrame();
        Editor.Emitter.NodeRemoved += _ => RequestAnimationFrame();
        Editor.Emitter.NodeCreated += _ => RequestAnimationFrame();

        var seq = 0;
        Editor.Emitter.NodeCreated += node =>
        {
            _renderFragment += builder =>
            {
                builder.OpenComponent<ReteNode>(++seq);
                builder.AddAttribute(++seq, "Editor", Editor);
                builder.AddAttribute(++seq, "Node", node);
                builder.CloseComponent();
            };
        };
        Editor.Emitter.RenderControl += control =>
        {
            _renderFragment += builder =>
            {
                builder.OpenComponent<ReteControl>(++seq);
                builder.AddAttribute(++seq, "Control", control);
                builder.CloseComponent();
            };
        };
        Editor.Emitter.RenderConnection += (connection, input, output, inputElementReference, outputElementReference) =>
        {
            _renderFragment += builder =>
            {
                builder.OpenComponent<ReteConnection>(++seq);
                builder.AddAttribute(++seq, nameof(ReteConnection.Connection), connection);
                builder.AddAttribute(++seq, nameof(ReteConnection.Input), input);
                builder.AddAttribute(++seq, nameof(ReteConnection.Output), output);
                builder.AddAttribute(++seq, nameof(ReteConnection.InputElementReference), inputElementReference);
                builder.AddAttribute(++seq, nameof(ReteConnection.OutputElementReference), outputElementReference);
                builder.CloseComponent();
            };
        };
        Editor.AddNode(n1);
        Editor.AddNode(n2);
        Editor.AddNode(n3);
        //Editor.Connect(n1.Outputs["num"], n2.Inputs["innum"]);
        Engine.Emitter.OnProcess();
    }
}
